{"version":3,"sources":["context/SessionProvider.js","components/PageLayout.js","components/Header.js","components/GameTile.js","components/ButtonTab.js","components/ButtonBig.js","components/GamesBoard.js","components/TileLayout.js","components/PlayerTile.js","services/getRandomColorCode.js","components/PlayersBoard.js","components/SessionPlayerTile.js","components/RandomPlayerOrder.js","components/Footer.js","components/SessionTimer.js","components/SessionEndPlayerTile.js","components/SessionEnd.js","components/SessionTile.js","components/SessionBoard.js","pages/Session.js","services/gameNightTrackerApi.js","pages/Login.js","services/loginService.js","pages/Overview.js","App.js","reportWebVitals.js","components/GlobalStyle.js","index.js"],"names":["SessionContext","createContext","SessionProvider","children","useState","session","setSession","Provider","value","updatedSession","styled","div","Header","Wrapper","src","alt","header","GameTile","game","setGameToPlay","setNoGameSelected","type","name","onChange","e","handleChange","thumbnailUrl","section","button","GamesBoard","games","selectGame","gameToPlay","noGameSelected","List","map","id","ButtonTab","ButtonBig","onClick","ul","PlayerTile","existingPlayer","TileLayout","color","size","event","getRandomColorCode","code","count","Math","floor","random","PlayersBoard","existingPlayers","setExistingPlayers","selectPlayer","players","setPlayers","playerToAdd","setPlayerToAdd","error","setError","noPlayersSelected","setNoPlayersSelected","hasPlayerToAdd","length","selectedPlayer","target","checked","includes","player","filter","Form","onSubmit","preventDefault","playerToAddToExistingPlayers","some","placeholder","disabled","form","SessionPlayerTile","RandomPlayerOrder","randomizePlayer","startTimer","firstPlayer","setFirstPlayer","randomizePlayerOrder","playerListToRandomize","playerList","randomizedPlayers","randomIndex","push","splice","imageUrl","className","intervalId","setInterval","setTimeout","clearInterval","Footer","href","SessionTimer","setStartDate","setSessionDuration","s","m","h","timer","setTimer","startTimeForSession","setStartTimeForSession","stopTimeForSession","setStopTimeForSession","setIntervalId","gameHasStarted","setGameHasStarted","duration","setDuration","updatedS","updatedM","updatedH","run","MeepleSection","MeepleX","Meeple","startDate","Date","startDateTimeStamp","getTime","stopDateTimeStamp","gameDuration","toString","split","GiMeeple","SessionEndPlayerTile","playersWithScores","setPlayersWithScores","playerWithScore","score","onChangeHandler","SessionEnd","setFinalPlayerList","useEffect","playerScores","sort","a","b","winner","scoresAndWinner","winnerPlayerId","SessionTile","startDateTimestamp","substring","gameName","style","verticalAlign","SessionBoard","sessions","Session","jwtToken","useContext","updateSession","setGames","history","useHistory","token","axios","get","headers","Authorization","then","response","data","gameList","catch","console","playersInDb","PageLayout","gameSession","apiGameId","status","updatedGameSession","updatedPlayerList","sessionStart","startTime","updateSessionTime","updateDuration","updatedScores","log","post","gameNightTrackerApi","Login","setJwtToken","username","setUsername","password","setPassword","to","Image","loginUser","img","Overview","setSessions","sessionList","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById"],"mappings":"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","file":"static/js/main.c2b45218.chunk.js","sourcesContent":["import { createContext, useContext, useState } from 'react';\n\nexport const SessionContext = createContext();\n\nexport const SessionProvider = ({ children }) => {\n    const [session, setSession] = useState();\n\n    const updateSession = (updatedSession) => {\n        setSession(updatedSession);\n    };\n\n    return (\n        <SessionContext.Provider value={[session, updateSession]}>\n            {children}\n        </SessionContext.Provider>\n    );\n};\n\nexport const useSession = () => useContext(SessionContext);\n","import styled from 'styled-components/macro';\n\nexport default styled.div`\n    height: 100vh;\n    display: grid;\n    grid-template-rows: auto 1fr auto;\n\n    main {\n        display: grid;\n        grid-template-rows: 1fr auto;\n        height: 100%;\n        background: var(--primary);\n        padding: 0 16px;\n        overflow-y: hidden;\n    }\n`;\n","import styled from 'styled-components/macro';\n\nexport default function Header() {\n    return (\n        <Wrapper>\n            <div>\n                <img src=\"./images/gnt_logo_quer2.png\" alt=\"\" />\n            </div>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.header`\n    background: var(--primary);\n    padding: 10px 16px;\n    text-align: center;\n    border-bottom: 1px solid rgba(103, 103, 184, 0.53);\n\n    img {\n        text-align: center;\n        margin: 5px 0 0 0;\n        width: 90vw;\n    }\n`;\n","import styled from 'styled-components/macro';\n\nexport default function GameTile({ game, setGameToPlay, setNoGameSelected }) {\n    const handleChange = (game) => {\n        setNoGameSelected(false);\n        setGameToPlay(game);\n    };\n\n    return (\n        <Wrapper>\n            <label>\n                <input\n                    type=\"radio\"\n                    name=\"game\"\n                    onChange={(e) => handleChange(game)}\n                />\n                <img src={game.thumbnailUrl} alt={game.name} />\n            </label>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.section`\n    img {\n        width: 100%;\n        border-bottom-right-radius: 20px;\n        border-right: 1px solid rgba(103, 103, 184, 0.53);\n        border-bottom: 1px solid rgba(103, 103, 184, 0.53);\n        clip: rect(80px 80px);\n    }\n\n    [type='radio'] {\n        position: absolute;\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n\n    [type='radio'] + img {\n        cursor: pointer;\n    }\n\n    [type='radio']:checked + img {\n        box-shadow: 2px 2px 1px 1px #e51a23;\n    }\n`;\n","import styled from 'styled-components/macro';\n\nexport default styled.section`\n    background: var(--primary);\n    border-top: 1px solid rgba(103, 103, 184, 0.53);\n    text-align: center;\n`;\n","import styled from 'styled-components/macro';\n\nexport default styled.button`\n    border-radius: 20px;\n    box-shadow: black 1px 2px;\n    padding: 10px 50px;\n    margin: 15px;\n    background: #c8a1a2;\n    color: white;\n    border: none;\n    outline: none;\n\n    &:disabled {\n        background: none;\n        border: 1px solid white;\n    }\n`;\n","import GameTile from './GameTile';\nimport styled from 'styled-components/macro';\nimport ButtonTab from './ButtonTab';\nimport ButtonBig from './ButtonBig';\nimport { useState } from 'react';\n\nexport default function GamesBoard({ games, selectGame }) {\n    const [gameToPlay, setGameToPlay] = useState();\n    const [noGameSelected, setNoGameSelected] = useState(false);\n\n    const onClickHandler = () => {\n        if (gameToPlay) {\n            selectGame(gameToPlay);\n        } else {\n            setNoGameSelected(true);\n        }\n    };\n\n    return (\n        <>\n            <Wrapper>\n                {noGameSelected && <span>PLEASE SELECT A GAME!</span>}\n                <List>\n                    {games.map((game) => (\n                        <li key={game.id}>\n                            <GameTile\n                                game={game}\n                                setGameToPlay={setGameToPlay}\n                                setNoGameSelected={setNoGameSelected}\n                            />\n                        </li>\n                    ))}\n                </List>\n            </Wrapper>\n            <ButtonTab>\n                <ButtonBig onClick={onClickHandler}>CONTINUE</ButtonBig>\n            </ButtonTab>\n        </>\n    );\n}\n\nconst Wrapper = styled.section`\n    display: grid;\n    grid-template-rows: 1fr auto;\n    height: 100%;\n    background: var(--primary);\n    padding: 0 16px;\n    overflow-y: hidden;\n\n    span {\n        text-align: center;\n        margin-top: 10px;\n    }\n`;\n\nconst List = styled.ul`\n    width: 100%;\n    list-style: none;\n    margin: 0;\n    padding: 20px 5px;\n    display: grid;\n    justify-content: center;\n    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n    justify-items: stretch;\n    grid-gap: 10px;\n    overflow-y: scroll;\n`;\n","import styled from 'styled-components/macro';\n\nexport default styled.section`\n    background: none;\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 5px 15px;\n    margin: 0;\n    display: grid;\n    align-items: center;\n    justify-items: center;\n    grid-template-columns: 1fr 1fr 1fr;\n\n    span {\n        font-size: 1em;\n        padding-bottom: 2px;\n    }\n`;\n","import styled from 'styled-components/macro';\nimport { Gi3DMeeple } from 'react-icons/all';\nimport { IconContext } from 'react-icons';\nimport TileLayout from './TileLayout';\n\nexport default function PlayerTile({ existingPlayer, onChange }) {\n    return (\n        <TileLayout>\n            <IconContext.Provider\n                value={{ color: existingPlayer.color, size: '1.5em' }}\n            >\n                <Gi3DMeeple />\n            </IconContext.Provider>\n            <span>{existingPlayer.name}</span>\n            <input\n                type=\"checkbox\"\n                onChange={(event) => onChange(existingPlayer, event)}\n            />\n        </TileLayout>\n    );\n}\n","const getRandomColorCode = () => {\n    const makeColorCode = '0123456789ABCDEF';\n    let code = '#';\n    for (let count = 0; count < 6; count++) {\n        code = code + makeColorCode[Math.floor(Math.random() * 16)];\n    }\n    return code;\n};\n\nexport default getRandomColorCode;\n","import styled from 'styled-components/macro';\nimport ButtonTab from './ButtonTab';\nimport PlayerTile from './PlayerTile';\nimport ButtonBig from './ButtonBig';\nimport { useState } from 'react';\nimport getRandomColorCode from '../services/getRandomColorCode';\n\nexport default function PlayersBoard({\n    existingPlayers,\n    setExistingPlayers,\n    selectPlayer,\n}) {\n    const [players, setPlayers] = useState([]);\n    const [playerToAdd, setPlayerToAdd] = useState('');\n    const [error, setError] = useState(false);\n    const [noPlayersSelected, setNoPlayersSelected] = useState(false);\n\n    const hasPlayerToAdd = playerToAdd.length > 0;\n\n    const handleChange = (event) => {\n        setError(false);\n        setPlayerToAdd(event.target.value);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (!hasPlayerToAdd) {\n            return;\n        }\n        const playerToAddToExistingPlayers = {\n            name: playerToAdd,\n            color: getRandomColorCode(),\n        };\n        if (existingPlayers.length > 0) {\n            if (\n                !existingPlayers.some(\n                    (existingPlayer) => existingPlayer.name === playerToAdd\n                )\n            ) {\n                setExistingPlayers([\n                    ...existingPlayers,\n                    playerToAddToExistingPlayers,\n                ]);\n                setPlayerToAdd('');\n            } else {\n                setError(true);\n            }\n        }\n    };\n\n    const onChange = (selectedPlayer, event) => {\n        setNoPlayersSelected(false);\n        if (event.target.checked) {\n            if (\n                !players.includes(\n                    (player) => player.name === selectedPlayer.name\n                )\n            ) {\n                setPlayers([...players, selectedPlayer]);\n            }\n        } else {\n            setPlayers(\n                players.filter((player) => player.name !== selectedPlayer.name)\n            );\n        }\n    };\n\n    const handleClick = (event) => {\n        if (players.length > 0) {\n            selectPlayer(players);\n        } else {\n            setNoPlayersSelected(true);\n        }\n    };\n\n    return (\n        <>\n            <Wrapper>\n                <Form onSubmit={handleSubmit}>\n                    <input\n                        type=\"text\"\n                        value={playerToAdd}\n                        placeholder=\"NEW PLAYER\"\n                        onChange={(event) => handleChange(event)}\n                    />\n                    <ButtonBig type=\"submit\" disabled={!hasPlayerToAdd}>\n                        +\n                    </ButtonBig>\n                </Form>\n                {error && <p>Player already exists!</p>}\n                {noPlayersSelected && <p>No players selected!</p>}\n                <List>\n                    {existingPlayers &&\n                        existingPlayers.map((existingPlayer) => (\n                            <li key={existingPlayer.name}>\n                                <PlayerTile\n                                    existingPlayer={existingPlayer}\n                                    onChange={onChange}\n                                />\n                            </li>\n                        ))}\n                </List>\n            </Wrapper>\n            <ButtonTab>\n                <ButtonBig onClick={() => handleClick()}>CONTINUE</ButtonBig>\n            </ButtonTab>\n        </>\n    );\n}\n\nconst Wrapper = styled.section`\n    background: var(--primary);\n    display: grid;\n    grid-template-rows: auto auto auto;\n    overflow: hidden;\n\n    p {\n        padding: 0;\n        margin: 0;\n        text-align: center;\n    }\n`;\n\nconst Form = styled.form`\n    max-width: 100%;\n\n    padding: 0 10px;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    justify-content: center;\n    align-items: center;\n\n    input {\n        padding: 10px 5px;\n        margin: 15px;\n        border-radius: 3px;\n        text-align: center;\n        border: none;\n        outline: none;\n    }\n`;\n\nconst List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 20px 0;\n    display: grid;\n    justify-content: center;\n    grid-gap: 10px;\n    overflow-y: scroll;\n`;\n","import styled from 'styled-components/macro';\nimport { Gi3DMeeple } from 'react-icons/all';\nimport { IconContext } from 'react-icons';\nimport TileLayout from './TileLayout';\n\nexport default function SessionPlayerTile({ player }) {\n    return (\n        <TileLayout>\n            <IconContext.Provider\n                value={{ color: player.color, size: '1.5em' }}\n            >\n                <Gi3DMeeple />\n            </IconContext.Provider>\n            <span>{player.name}</span>\n        </TileLayout>\n    );\n}\n","import styled from 'styled-components';\nimport ButtonBig from './ButtonBig';\nimport ButtonTab from './ButtonTab';\nimport { useState } from 'react';\nimport SessionPlayerTile from './SessionPlayerTile';\n\nexport default function RandomPlayerOrder({\n    session,\n    randomizePlayer,\n    startTimer,\n}) {\n    const [firstPlayer, setFirstPlayer] = useState(false);\n\n    const randomizePlayerOrder = () => {\n        const playerListToRandomize = [...session.playerList];\n        const randomizedPlayers = [];\n        while (playerListToRandomize.length > 0) {\n            const randomIndex = Math.floor(\n                Math.random() * playerListToRandomize.length\n            );\n            randomizedPlayers.push(playerListToRandomize[randomIndex]);\n            playerListToRandomize.splice(randomIndex, 1);\n        }\n        randomizePlayer(randomizedPlayers);\n    };\n\n    const randomizeInterval = () => {\n        const intervalId = setInterval(randomizePlayerOrder, 100);\n        setTimeout(() => clearInterval(intervalId), 3000);\n        setFirstPlayer(true);\n    };\n\n    const onClickHandler = () => {\n        startTimer();\n    };\n\n    return (\n        <>\n            <Wrapper>\n                <img src={session.imageUrl} alt=\"game cover\" />\n                <ul>\n                    {session.playerList.map((player) => (\n                        <li key={player.name}>\n                            <SessionPlayerTile\n                                player={player}\n                                firstPlayer={firstPlayer}\n                            />\n                        </li>\n                    ))}\n                </ul>\n                <ButtonBig className=\"randomizer\" onClick={randomizeInterval}>\n                    RANDOMIZE\n                </ButtonBig>\n            </Wrapper>\n            <ButtonTab>\n                <ButtonBig onClick={onClickHandler}>CONTINUE</ButtonBig>\n            </ButtonTab>\n        </>\n    );\n}\n\nconst Wrapper = styled.section`\n    background: var(--primary);\n    display: grid;\n    grid-template-rows: auto 1fr auto;\n    justify-items: center;\n    overflow-y: hidden;\n\n    img {\n        margin: 20px 0;\n        max-width: 50%;\n        border-bottom-right-radius: 20px;\n        border-right: 2px solid rgba(103, 103, 184, 0.53);\n        border-bottom: 2px solid rgba(103, 103, 184, 0.53);\n    }\n\n    span {\n        padding-top: 10px;\n    }\n\n    ul {\n        list-style: none;\n        padding: 0 20px;\n        margin-top: 0;\n        overflow-y: scroll;\n    }\n\n    li {\n        margin-top: 10px;\n    }\n\n    .randomizer {\n        padding: 10px 45px;\n    }\n`;\n","import styled from 'styled-components/macro';\n\nexport default function Footer() {\n    return (\n        <Wrapper>\n            <h5>powered by</h5>\n            <a\n                href=\"https://www.instagram.com/brettspielfieber/?hl=de}\"\n                target=\"_blank\"\n            >\n                <img src=\"./images/bf-logo.png\" alt=\" logo\" />\n            </a>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.section`\n    display: grid;\n    grid-template-columns: auto auto;\n    background: var(--primary);\n    margin: 0;\n    padding: 0;\n    border-top: 2px solid var(--primary);\n\n    img {\n        width: 20px;\n        margin-bottom: 5px;\n        padding-left: 3px;\n    }\n\n    h5 {\n        padding-bottom: 5px;\n        margin: 0;\n        text-align: right;\n        color: rgba(255, 255, 255, 0.45);\n    }\n`;\n","import styled from 'styled-components/macro';\nimport { useState } from 'react';\nimport ButtonBig from './ButtonBig';\nimport ButtonTab from './ButtonTab';\nimport { GiMeeple } from 'react-icons/all';\n\nexport default function SessionTimer({\n    setStartDate,\n    setSessionDuration,\n    session,\n}) {\n    const [timer, setTimer] = useState({ s: 0, m: 0, h: 0 });\n    const [startTimeForSession, setStartTimeForSession] = useState('');\n    const [stopTimeForSession, setStopTimeForSession] = useState('');\n    const [intervalId, setIntervalId] = useState();\n    const [gameHasStarted, setGameHasStarted] = useState(false);\n    const [duration, setDuration] = useState();\n\n    const onClickToStart = () => {\n        const startDate = new Date();\n        let startDateTimeStamp = startDate.getTime();\n        setStartTimeForSession(startDateTimeStamp);\n        setStartDate(startDate);\n        run();\n        const intervalId = setInterval(run, 1000);\n        setIntervalId(intervalId);\n        setGameHasStarted(true);\n    };\n\n    const onClickToStop = () => {\n        const stopDate = new Date();\n        let stopDateTimeStamp = stopDate.getTime();\n        setStopTimeForSession(stopDateTimeStamp);\n\n        clearInterval(intervalId);\n        setGameHasStarted(false);\n        const gameDuration = (\n            (new Date().getTime() - startTimeForSession) /\n            1000 /\n            60\n        )\n            .toString()\n            .split('.')[0];\n\n        setDuration(gameDuration);\n    };\n\n    let updatedS = timer.s,\n        updatedM = timer.m,\n        updatedH = timer.h;\n\n    const run = () => {\n        if (updatedS === 60) {\n            updatedM++;\n            updatedS = 0;\n        }\n        if (updatedM === 60) {\n            updatedH++;\n            updatedM = 0;\n        }\n        updatedS++;\n        return setTimer({ s: updatedS, m: updatedM, h: updatedH });\n    };\n\n    const goToScoring = () => {\n        setSessionDuration(duration);\n    };\n\n    return (\n        <>\n            <Wrapper>\n                <img src={session.imageUrl} alt=\"game cover\" />\n                <section className=\"timer\">\n                    <span className=\"time\">\n                        {timer.h >= 10 ? timer.h : '0' + timer.h}\n                    </span>\n                    <span className=\"colon\">:</span>\n                    <span className=\"time\">\n                        {timer.m >= 10 ? timer.m : '0' + timer.m}\n                    </span>\n                    <span className=\"colon\">:</span>\n                    <span className=\"time\">\n                        {timer.s >= 10 ? timer.s : '0' + timer.s}\n                    </span>\n                </section>\n                {!gameHasStarted && (\n                    <MeepleSection>\n                        <MeepleX />\n                        <MeepleX />\n                        <MeepleX />\n                        <MeepleX />\n                    </MeepleSection>\n                )}\n                {gameHasStarted && (\n                    <MeepleSection>\n                        <Meeple />\n                        <Meeple className=\"two\" />\n                        <Meeple className=\"three\" />\n                        <Meeple className=\"four\" />\n                    </MeepleSection>\n                )}\n\n                <div>\n                    <ButtonBig\n                        onClick={onClickToStart}\n                        disabled={gameHasStarted}\n                    >\n                        START\n                    </ButtonBig>\n                    <ButtonBig\n                        onClick={onClickToStop}\n                        disabled={!gameHasStarted}\n                    >\n                        STOP\n                    </ButtonBig>\n                </div>\n            </Wrapper>\n            <ButtonTab>\n                <ButtonBig\n                    onClick={goToScoring}\n                    disabled={!stopTimeForSession > 0}\n                >\n                    SCORING\n                </ButtonBig>\n            </ButtonTab>\n        </>\n    );\n}\n\nconst Wrapper = styled.div`\n    display: grid;\n    grid-template-rows: auto auto auto auto;\n    justify-items: center;\n    height: 100%;\n    background: var(--primary);\n    padding: 0 16px;\n    overflow-y: hidden;\n\n    img {\n        margin: 20px 0;\n        max-width: 50%;\n        border-bottom-right-radius: 20px;\n        border-right: 2px solid rgba(103, 103, 184, 0.53);\n        border-bottom: 2px solid rgba(103, 103, 184, 0.53);\n    }\n\n    .timer {\n        margin-top: 20px;\n        text-align: center;\n    }\n\n    .time {\n        border: 1px solid white;\n        border-radius: 5px;\n        padding: 20px;\n        margin: 0 5px;\n        font-size: 2em;\n    }\n\n    .colon {\n        font-size: 2em;\n    }\n\n    .two {\n        color: gold;\n        animation-delay: 1s;\n    }\n\n    .three {\n        color: lightskyblue;\n        animation-delay: 2s;\n    }\n\n    .four {\n        color: lightgreen;\n        animation-delay: 3s;\n    }\n\n    div {\n        align-self: end;\n        margin-top: 15px;\n        text-align: center;\n    }\n`;\n\nconst MeepleSection = styled.section`\n    padding: 0 20px;\n    margin: 15px 0;\n    display: grid;\n    grid-template-columns: auto auto auto auto;\n    justify-items: center;\n    align-self: center;\n`;\n\nconst MeepleX = styled(GiMeeple)`\n    color: white;\n    transform: scale(3);\n    margin: 25px 20px;\n`;\n\nconst Meeple = styled(GiMeeple)`\n    margin: 25px 20px;\n    color: firebrick;\n    transform: scale(3);\n    -webkit-animation: Meeple 4s infinite linear;\n    animation: Meeple 4s infinite linear;\n\n    @-webkit-keyframes Meeple {\n        0% {\n            -webkit-transform: rotate(0);\n            transform: rotate(0);\n        }\n        100% {\n            -webkit-transform: rotate(359);\n            transform: rotate(359);\n        }\n    }\n\n    @keyframes Meeple {\n        0% {\n            -webkit-transform: rotate(0);\n            transform: rotate(0);\n        }\n        100% {\n            -webkit-transform: rotate(359);\n            transform: rotate(359);\n        }\n    }\n`;\n","import { IconContext } from 'react-icons';\nimport { Gi3DMeeple } from 'react-icons/all';\nimport styled from 'styled-components/macro';\n\nexport default function SessionEndPlayerTile({\n    player,\n    playersWithScores,\n    setPlayersWithScores,\n}) {\n    const onChangeHandler = (player, event) => {\n        const playerWithScore = {\n            name: player.name,\n            color: player.color,\n            score: event.target.value,\n        };\n\n        if (\n            !playersWithScores.some(\n                (player) => player.name === playerWithScore.name\n            )\n        ) {\n            setPlayersWithScores([...playersWithScores, playerWithScore]);\n        } else {\n            setPlayersWithScores(\n                playersWithScores.map((player) =>\n                    player.name === playerWithScore.name\n                        ? playerWithScore\n                        : player\n                )\n            );\n        }\n    };\n\n    return (\n        <Wrapper>\n            <IconContext.Provider\n                value={{ color: player.color, size: '1.5em' }}\n            >\n                <Gi3DMeeple />\n            </IconContext.Provider>\n            <span>{player.name}</span>\n            <input\n                type=\"text\"\n                placeholder=\"SCORE\"\n                onChange={(event) => onChangeHandler(player, event)}\n            />\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.section`\n    background: none;\n    border-bottom: 1px solid darkgrey;\n    padding: 10px 15px;\n    margin: 5px;\n    display: grid;\n    align-items: center;\n    justify-items: start;\n    grid-template-columns: auto 1fr 1fr;\n    grid-gap: 10px;\n\n    span {\n        padding: 0 0 0 15px;\n    }\n\n    input {\n        margin-left: 20px;\n        padding: 3px;\n        width: 80%;\n        font-size: 0.6em;\n        border-radius: 3px;\n        border: none;\n    }\n`;\n","import SessionEndPlayerTile from './SessionEndPlayerTile';\nimport styled from 'styled-components/macro';\nimport ButtonTab from './ButtonTab';\nimport ButtonBig from './ButtonBig';\nimport { useState, useEffect } from 'react';\n\nexport default function SessionEnd({ session, setFinalPlayerList }) {\n    const [playersWithScores, setPlayersWithScores] = useState([]);\n\n    useEffect(() => {\n        setPlayersWithScores(session.playerList);\n    }, []);\n\n    const onSubmitHandler = (event) => {\n        event.preventDefault();\n\n        const playerScores = playersWithScores.map((player) => player.score);\n\n        playerScores.sort(function (a, b) {\n            return b - a;\n        });\n\n        const winnerWithScore = playersWithScores.filter(\n            (player) => player.score === playerScores[0]\n        );\n        const winner = winnerWithScore[0].name;\n        const scoresAndWinner = {\n            playerList: playersWithScores,\n            winnerPlayerId: winner,\n        };\n\n        if (scoresAndWinner) {\n            setFinalPlayerList(scoresAndWinner);\n        }\n    };\n\n    return (\n        <>\n            <Wrapper>\n                <img src={session.imageUrl} alt=\"game cover\" />\n                <p>PLAY TIME: {session.duration} Minutes</p>\n                <Form onSubmit={onSubmitHandler}>\n                    <ul>\n                        {session.playerList.map((player) => (\n                            <li key={player.name}>\n                                <SessionEndPlayerTile\n                                    player={player}\n                                    playersWithScores={playersWithScores}\n                                    setPlayersWithScores={setPlayersWithScores}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n                    <ButtonTab>\n                        <ButtonBig type=\"submit\">SAVE</ButtonBig>\n                    </ButtonTab>\n                </Form>\n            </Wrapper>\n        </>\n    );\n}\n\nconst Wrapper = styled.section`\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n    justify-items: center;\n\n    height: 100%;\n    background: var(--primary);\n    padding: 0 16px;\n    overflow-y: hidden;\n\n    img {\n        margin: 20px 0;\n        max-width: 50%;\n        border-bottom-right-radius: 20px;\n        border-right: 2px solid rgba(103, 103, 184, 0.53);\n        border-bottom: 2px solid rgba(103, 103, 184, 0.53);\n    }\n\n    p {\n        margin: 5px;\n        padding-bottom: 5px;\n    }\n\n    form {\n        overflow-y: scroll;\n    }\n\n    ul {\n        list-style: none;\n        margin: 0;\n        padding: 5px 20px;\n    }\n`;\n\nconst Form = styled.form`\n    display: grid;\n    grid-template-rows: 1fr auto;\n`;\n","import styled from 'styled-components/macro';\nimport { AiFillStar, GiJeweledChalice } from 'react-icons/all';\nimport { IconContext } from 'react-icons';\n\nexport default function SessionTile({ session }) {\n    return (\n        <Wrapper>\n            <span>\n                <img src={session.imageUrl} alt=\"game box cover\" />\n            </span>\n            <div>\n                <span>{session.startDateTimestamp.substring(0, 10)}</span>\n                <br />\n                <span className=\"name\">{session.gameName}</span>\n                <br />\n                <br />\n                <span>{session.duration} Mins</span>\n                <br />\n                <span>\n                    Winner:{' '}\n                    <IconContext.Provider\n                        value={{\n                            style: {\n                                color: '#e2c617',\n                                size: '1.5em',\n                                verticalAlign: 'middle',\n                            },\n                        }}\n                    >\n                        <GiJeweledChalice />\n                    </IconContext.Provider>{' '}\n                    {session.winnerPlayerId}\n                </span>\n            </div>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.section`\n    background: none;\n    border: 1px solid white;\n    list-style: none;\n    border-radius: 5px;\n    padding: 20px;\n    margin: 20px 10px 0 20px;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    justify-content: space-between;\n    grid-gap: 20px;\n    font-size: 0.7em;\n\n    div {\n        grid-column: span 2;\n    }\n\n    img {\n        border-bottom-right-radius: 20px;\n        max-width: 80px;\n        border-right: 1px solid rgba(103, 103, 184, 0.53);\n        border-bottom: 1px solid rgba(103, 103, 184, 0.53);\n    }\n\n    .name {\n        font-size: 1.5em;\n        padding: 0;\n        margin: 0;\n    }\n\n    button {\n        font-size: 0.8em;\n    }\n`;\n","import styled from 'styled-components/macro';\nimport SessionTile from './SessionTile';\n\nexport default function SessionBoard({ sessions }) {\n    return (\n        <Wrapper>\n            {sessions.map((session) => (\n                <li key={session.id}>\n                    <SessionTile session={session} />\n                </li>\n            ))}\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.ul`\n    display: grid;\n    justify-content: space-around;\n    background: none;\n    overflow-y: scroll;\n    list-style: none;\n    padding: 5px;\n    margin: 10px 0;\n`;\n","import { useSession } from '../context/SessionProvider';\nimport PageLayout from '../components/PageLayout';\nimport Header from '../components/Header';\nimport GamesBoard from '../components/GamesBoard';\nimport PlayersBoard from '../components/PlayersBoard';\nimport RandomPlayerOrder from '../components/RandomPlayerOrder';\nimport Footer from '../components/Footer';\nimport { useState, useEffect } from 'react';\nimport * as gameNightTrackerApi from '../services/gameNightTrackerApi';\nimport SessionTimer from '../components/SessionTimer';\nimport SessionEnd from '../components/SessionEnd';\nimport SessionBoard from '../components/SessionBoard';\nimport { useHistory } from 'react-router';\n\nexport default function Session({ jwtToken }) {\n    const [session, updateSession] = useSession();\n    const [games, setGames] = useState([]);\n    const [existingPlayers, setExistingPlayers] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        jwtToken &&\n            gameNightTrackerApi\n                .getAllGames(jwtToken)\n                .then((gameList) => setGames(gameList))\n                .catch((error) => console.error(error));\n    }, [jwtToken]);\n\n    useEffect(() => {\n        jwtToken &&\n            gameNightTrackerApi\n                .getAllPlayers(jwtToken)\n                .then((playersInDb) => setExistingPlayers(playersInDb))\n                .catch((error) => console.error(error));\n    }, [jwtToken]);\n\n    const selectGame = (gameToPlay) => {\n        const gameSession = {\n            apiGameId: gameToPlay.apiGameId,\n            gameName: gameToPlay.name,\n            imageUrl: gameToPlay.thumbnailUrl,\n            startDateTimestamp: '',\n            duration: '',\n            playerList: [],\n            winnerPlayerId: '',\n            status: 'addPlayers',\n        };\n        updateSession(gameSession);\n    };\n\n    const selectPlayer = (players) => {\n        if (players) {\n            const updatedGameSession = {\n                ...session,\n                playerList: players,\n                status: 'randomizePlayers',\n            };\n            updateSession(updatedGameSession);\n        }\n    };\n\n    const randomizePlayers = (playerListToRandomize) => {\n        if (playerListToRandomize) {\n            const updatedPlayerList = {\n                ...session,\n                playerList: playerListToRandomize,\n            };\n            updateSession(updatedPlayerList);\n        }\n    };\n\n    const startTimer = () => {\n        const sessionStart = {\n            ...session,\n            status: 'startSession',\n        };\n        updateSession(sessionStart);\n    };\n\n    const setStartDate = (startTime) => {\n        if (startTime) {\n            const updateSessionTime = {\n                ...session,\n                startDateTimestamp: startTime,\n            };\n            updateSession(updateSessionTime);\n        }\n    };\n\n    const setSessionDuration = (duration) => {\n        const updateDuration = {\n            ...session,\n            duration: duration,\n            status: 'scoring',\n        };\n        updateSession(updateDuration);\n    };\n\n    const setFinalPlayerList = (scoresAndWinner) => {\n        const updatedScores = {\n            ...session,\n            playerList: scoresAndWinner.playerList,\n            winnerPlayerId: scoresAndWinner.winnerPlayerId,\n        };\n        console.log(updatedScores);\n        updateSession(updatedScores);\n\n        gameNightTrackerApi\n            .saveSession(jwtToken, updatedScores)\n            .then(updateSession(null))\n            .then(() => history.push('/'))\n            .catch((error) => console.error(error));\n    };\n\n    return (\n        <PageLayout>\n            <Header />\n            {!session && <GamesBoard games={games} selectGame={selectGame} />}\n            {session && session.status === 'addPlayers' && (\n                <PlayersBoard\n                    existingPlayers={existingPlayers}\n                    setExistingPlayers={setExistingPlayers}\n                    selectPlayer={selectPlayer}\n                />\n            )}\n            {session && session.status === 'randomizePlayers' && (\n                <RandomPlayerOrder\n                    session={session}\n                    randomizePlayer={randomizePlayers}\n                    startTimer={startTimer}\n                />\n            )}\n            {session && session.status === 'startSession' && (\n                <SessionTimer\n                    setStartDate={setStartDate}\n                    setSessionDuration={setSessionDuration}\n                    session={session}\n                />\n            )}\n            {session && session.status === 'scoring' && (\n                <SessionEnd\n                    session={session}\n                    setFinalPlayerList={setFinalPlayerList}\n                />\n            )}\n            {session && session.status === 'endSession' && <SessionBoard />}\n\n            <Footer />\n        </PageLayout>\n    );\n}\n","import axios from 'axios';\n\nexport const getAllGames = (token) =>\n    axios\n        .get('user/games', { headers: { Authorization: 'Bearer ' + token } })\n        .then((response) => response.data);\n\nexport const getAllSessions = (token) =>\n    axios\n        .get('user/sessions', { headers: { Authorization: 'Bearer ' + token } })\n        .then((response) => response.data);\n\nexport const getAllPlayers = (token) =>\n    axios\n        .get('user/players', { headers: { Authorization: 'Bearer ' + token } })\n        .then((response) => response.data);\n\nexport const saveSession = (token, session) =>\n    axios\n        .post('user/savesession', session, {\n            headers: { Authorization: 'Bearer ' + token },\n        })\n        .then((response) => response.data);\n","import PageLayout from '../components/PageLayout';\nimport styled from 'styled-components/macro';\nimport Footer from '../components/Footer';\nimport { useState } from 'react';\nimport { loginUser } from '../services/loginService';\nimport { Redirect } from 'react-router-dom';\nimport ButtonBig from '../components/ButtonBig';\nimport { GiPerspectiveDiceSixFacesFour } from 'react-icons/all';\nimport { IconContext } from 'react-icons';\n\nexport default function Login({ setJwtToken, jwtToken }) {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState(false);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (!username || !password) {\n            return;\n        }\n        loginUser(username, password).then(setJwtToken).catch(setError(true));\n        setUsername('');\n        setPassword('');\n    };\n\n    if (jwtToken) {\n        return <Redirect to={'/'} />;\n    }\n\n    return (\n        <PageLayout>\n            <main>\n                <Wrapper>\n                    <Image src=\"./images/gnt_logo.png\" alt=\"appLogo\" />\n                    {!error && (\n                        <p>\n                            <IconContext.Provider\n                                value={{\n                                    style: {\n                                        verticalAlign: 'middle',\n                                    },\n                                }}\n                            >\n                                <GiPerspectiveDiceSixFacesFour />\n                            </IconContext.Provider>{' '}\n                            IT'S GAME TIME!\n                        </p>\n                    )}\n                    {error && <p>Please try again!</p>}\n\n                    <Form onSubmit={handleSubmit}>\n                        <input\n                            placeholder=\"username\"\n                            type=\"text\"\n                            value={username}\n                            onChange={({ target }) => setUsername(target.value)}\n                        />\n                        <input\n                            placeholder=\"password\"\n                            type=\"password\"\n                            value={password}\n                            onChange={({ target }) => setPassword(target.value)}\n                        />\n\n                        <ButtonBig type=\"submit\">Login</ButtonBig>\n                    </Form>\n                </Wrapper>\n            </main>\n            <Footer />\n        </PageLayout>\n    );\n}\n\nconst Wrapper = styled.section`\n    height: 100vh;\n    display: grid;\n    grid-template-rows: 1fr auto 1fr;\n    justify-items: center;\n    align-items: center;\n`;\n\nconst Form = styled.form`\n    width: 60%;\n    display: grid;\n    grid-template-rows: min-content min-content min-content;\n    grid-gap: 10px;\n\n    input {\n        border-radius: 5px;\n        border: none;\n        padding: 3px;\n        text-align: center;\n        outline: none;\n    }\n`;\n\nconst Image = styled.img`\n    width: 70%;\n`;\n","import axios from 'axios';\n\nconst baseUrl = 'auth/login';\n\nexport const loginUser = (username, password) =>\n    axios\n        .post(baseUrl, { username, password })\n        .then((response) => response.data);\n","import SessionBoard from '../components/SessionBoard';\nimport ButtonTab from '../components/ButtonTab';\nimport { Redirect, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as gameNightTrackerApi from '../services/gameNightTrackerApi';\nimport ButtonBig from '../components/ButtonBig';\nimport Header from '../components/Header';\nimport PageLayout from '../components/PageLayout';\nimport Footer from '../components/Footer';\n\nexport default function Overview({ jwtToken }) {\n    const [sessions, setSessions] = useState([]);\n\n    useEffect(() => {\n        jwtToken &&\n            gameNightTrackerApi\n                .getAllSessions(jwtToken)\n                .then((sessionList) => setSessions(sessionList))\n                .catch((error) => console.error(error));\n    }, [jwtToken]);\n\n    if (!jwtToken) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    return (\n        <PageLayout>\n            <Header />\n            <main>\n                <SessionBoard sessions={sessions} />\n            </main>\n            <ButtonTab>\n                <Link to={'/new'}>\n                    <ButtonBig>LET'S PLAY</ButtonBig>\n                </Link>\n            </ButtonTab>\n            <Footer />\n        </PageLayout>\n    );\n}\n","import Session from './pages/Session';\nimport Login from './pages/Login';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Overview from './pages/Overview';\nimport { SessionProvider } from './context/SessionProvider';\n\nexport default function App() {\n    const [jwtToken, setJwtToken] = useState();\n\n    return (\n        <SessionProvider>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Overview jwtToken={jwtToken} />\n                    </Route>\n                    <Route exact path=\"/login\">\n                        <Login setJwtToken={setJwtToken} jwtToken={jwtToken} />\n                    </Route>\n                    <Route path=\"/new\">\n                        <Session jwtToken={jwtToken} />\n                    </Route>\n                </Switch>\n            </Router>\n        </SessionProvider>\n    );\n}\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  :root {\n    --primary: darkslateblue;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    color: aliceblue;\n    font-family: sans-serif;\n  }\n\n  Button {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GlobalStyle from './components/GlobalStyle';\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}